using Microsoft.AspNetCore.SignalR.Client;
using Newtonsoft.Json;
using NssIT.Kiosk.AppDecorator.Common;
using NssIT.Kiosk.AppDecorator.Config;
using NssIT.Kiosk.Log.DB;
using NssIT.Kiosk.Network.SignalRClient.API.Base.Extension;
using NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway.Constant;
using NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway.Data;
using NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway.Data.Request;
using NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway.Data.Response;
using NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway.Event;
using NssIT.Train.Kiosk.Common.Helper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace NssIT.Kiosk.Network.SignalRClient.API.PaymentGateway
{
    /// <summary>
    /// ClassCode:EXIT35.01
    /// </summary>
    public class BTnGPaymentSnRClient : IDisposable 
    {
        public event EventHandler<PaymentRequestResultEventArgs> OnPaymentRequestResult;
        public event EventHandler<PaymentCompletedResultEventArgs> OnPaymentCompleted;
        public event EventHandler<PaymentEchoMessageEventArgs> OnPaymentEchoMessageReceived;

        private const string LogChannel = "BTnGPaymentGateway_API";

        private bool _connected = false;
        private Exception _connectionException = null;

        private bool _disposed = false;
        private bool _isStopWorking = false;
        private bool _isCompleted = false;
        private int _bTnGMinimumWaitingPeriod = 90;

        private DbLog _log = null;
        private HubConnection _realTimeConnection;
        private object _completedEventLock = new object();

        private string _snrConnectionId = null;

        // Payment Parameter 
        private string _webApiUrl = null;
        private string _webApiBaseUrl = null;
        private string _deviceId = null;
        private string _machineCode = null;
        private string _docNo = "*";
        private string _paymentGateway = "";
        private string _firstName = "";
        private string _lastName = "";
        private string _contactNo = "";
        private string _current = "*";
        private decimal _paymentAmount = 0.0M;
        private string _financePaymentMethod = "";
        //-----------------------------------------------------

        private Thread _saleThreadWorker = null;
        private CreateSaleResponse _paymentRequestResponse = null;
        
        /// <summary>
        /// FuncCode:EXIT35.0103
        /// </summary>
        /// <param name="deviceId">Machine Unique Id; Normally Guid string from registry; ID generated by system</param>
        /// <param name="machineCode">Like Kiosk Id; Id that predefined by admin to a machine</param>
        /// <param name="docNo">Like Booking Number</param>
        /// <param name="paymentAmount"></param>
        /// <param name="paymentGateway">Like "boost" or "touchngo_offline"</param>
        /// <param name="firstName"></param>
        /// <param name="lastName"></param>
        /// <param name="contactNo"></param>
        /// <param name="financePaymentMethod"></param>
        public BTnGPaymentSnRClient(string webApiUrl, string deviceId, string machineCode, string docNo, decimal paymentAmount, string current, string paymentGateway, string firstName, string lastName, string contactNo, string financePaymentMethod)
        {
            if (string.IsNullOrWhiteSpace(webApiUrl))
                throw new Exception("Invalid Web API Base Url specification to Payment Gateway. Machine Unique Id cannot be null/empty");

            if (string.IsNullOrWhiteSpace(deviceId))
                throw new Exception("Invalid Machine Unique Id specification to Payment Gateway. Machine Unique Id cannot be null/empty");

            if (string.IsNullOrWhiteSpace(machineCode))
                throw new Exception("Invalid Machine Code specification to Payment Gateway. Machine Code cannot be null/empty");

            if (string.IsNullOrWhiteSpace(current))
                throw new Exception("Invalid Current specification to Payment Gateway. Current cannot be null/empty");

            if (string.IsNullOrWhiteSpace(paymentGateway))
                throw new Exception("Invalid Payment Service specification to Payment Gateway. Payment Service cannot be null/empty");

            if (paymentAmount <= 0)
                throw new Exception("Invalid Payment Amount specification to Payment Gateway. Payment Amount cannot be less than or equal to zero");

            if (string.IsNullOrWhiteSpace(docNo) == false)
                _docNo = (docNo??"").Trim();

            _bTnGMinimumWaitingPeriod = Setting.GetSetting().BTnGMinimumWaitingPeriod;
            _webApiUrl = webApiUrl;
            _webApiBaseUrl = webApiUrl.Replace("/api", "");
            _deviceId = deviceId;
            _machineCode = machineCode;
            _paymentAmount = paymentAmount;
            _paymentGateway = paymentGateway;
            _firstName = firstName;
            _lastName = lastName;
            _contactNo = contactNo;
            _current = current;
            _financePaymentMethod = financePaymentMethod;
            _log = DbLog.GetDbLog();
        }

        public async void Dispose()
        {
            if (_disposed == false)
            {
                _disposed = true;

                //try
                //{
                //    await EndConnection();
                //}
                //catch { }

                if (OnPaymentRequestResult != null)
                {
                    Delegate[] delgList = OnPaymentRequestResult.GetInvocationList();
                    foreach (EventHandler<PaymentRequestResultEventArgs> delg in delgList)
                    {
                        try
                        {
                            OnPaymentRequestResult -= delg;
                        }
                        catch { }
                    }
                }

                if (OnPaymentCompleted != null)
                {
                    Delegate[] delgList = OnPaymentCompleted.GetInvocationList();
                    foreach (EventHandler<PaymentCompletedResultEventArgs> delg in delgList)
                    {
                        try
                        {
                            OnPaymentCompleted -= delg;
                        }
                        catch { }
                    }
                }

                if (OnPaymentEchoMessageReceived != null)
                {
                    Delegate[] delgList = OnPaymentEchoMessageReceived.GetInvocationList();
                    foreach (EventHandler<PaymentEchoMessageEventArgs> delg in delgList)
                    {
                        try
                        {
                            OnPaymentEchoMessageReceived -= delg;
                        }
                        catch { }
                    }
                }

                //EventHandler<PaymentEchoMessageEventArgs> OnPaymentEchoMessageReceived;

                // Below sleep allow system to end thread process.
                await Task.Delay(350);
                //---------------------------------------------------

                _paymentRequestResponse = null;
                _log = null;
            }
        }

        public void StartPayment()
        {
            if (_disposed)
                throw new Exception($@"{_paymentGateway} payment instant has been ended");

            if (_saleThreadWorker is null)
            {
                _saleThreadWorker = new Thread(SaleThreadWorking);
                _saleThreadWorker.IsBackground = true;
                _saleThreadWorker.SetApartmentState(ApartmentState.STA);
                _saleThreadWorker.Priority = ThreadPriority.AboveNormal;
                _saleThreadWorker.Start();
            }
        }

        /// <summary>
        /// Current SignalR Client Connection Id
        /// </summary>
        public string CurrentSnRConnectionId
        {
            get
            {
                return _snrConnectionId;
            }
        }

        /// <summary>
        /// FuncCode:EXIT35.0104
        /// </summary>
        public void GetConnectionStatus(out bool isConnected, out Exception error)
        {
            isConnected = false;
            error = null;

            //-----------------------------------------------------------------
            // Check Connection / Wait for connection
            DateTime timeout = DateTime.Now.AddSeconds(20);
            do
            {
                if ((_isStopWorking) || (_disposed))
                    break;

                else if (_realTimeConnection != null)
                    break;

                else if (timeout.Ticks < DateTime.Now.Ticks)
                    break;

                else
                    Thread.Sleep(300);

            } while (_realTimeConnection is null);
            //-----------------------------------------------------------------

            if (_connectionException != null)
            {
                error = _connectionException;
                isConnected = false;
            }

            else if (_disposed)
            {
                error = new Exception($@"{_paymentGateway} payment has already terminated");
                isConnected = false;
            }

            else if (_isStopWorking)
            {
                error = new Exception($@"{_paymentGateway} payment has already stopped");
                isConnected = false;
            }

            else if (_realTimeConnection != null)
            {
                if (_connected)
                {
                    isConnected = true;
                    error = null;
                }
                else
                {
                    if (_connectionException != null)
                    {
                        error = _connectionException;
                        isConnected = false;
                    }
                    else
                    {
                        error = new Exception("Connection error occur with Web Server. Connection suspended; (EXIT35.0104.X01)");
                        isConnected = false;
                    }
                }
            }
            else
            {
                error = new Exception("Connection error when try to talk with Web Server; (EXIT35.0104.X02)");
                isConnected = false;
            }
        }

        /// <summary>
        /// FuncCode:EXIT35.0106
        /// </summary>
        private async void SaleThreadWorking()
        {
            (DateTime NextConnErrLogTime, long NextConnErrLogTryCount, string TryCountString) connState =
                (NextConnErrLogTime: DateTime.Now, NextConnErrLogTryCount: 0, TryCountString: "");

            try
            {
                _snrConnectionId = null;
                _connected = false;
                _connectionException = null;

                ///// CYA-DEBUG
                DateTime debugNextConectionTime = DateTime.Now.AddSeconds(30);
                bool debugReconnect = false;
                /////------------------------------------------------------------------

                while (_disposed == false)
                {
                    ///// CYA-DEBUG
                    //if (debugNextConectionTime.Ticks < DateTime.Now.Ticks)
                    //{
                    //    debugNextConectionTime = DateTime.Now.AddSeconds(10);
                    //    debugReconnect = true;
                    //}
                    /////-----------------------------------------------------------------

                    // Connect to SignalR Web Server if disconnected
                    if ((debugReconnect) || (_realTimeConnection == null) || (_realTimeConnection.State == HubConnectionState.Reconnecting) || (_realTimeConnection.State == HubConnectionState.Disconnected))
                    {
                        debugReconnect = false;

                        connState.NextConnErrLogTryCount++;
                        connState.TryCountString += $@"/{DateTime.Now.Subtract(connState.NextConnErrLogTime).TotalSeconds}Sec";

                        await EndConnection();

                        ConnectResult conRest = await Connect();

                        if (conRest.IsConnected)
                        {
                            _log?.LogText(LogChannel, _docNo, "Connect to signalR web server successful", "A100", "BTnGPaymentSnRClient.SaleThreadWorking");

                            // Register Machine into SignalR Server.
                            await _realTimeConnection.InvokeAsync<string>("RegisterMachine", _deviceId, _machineCode);

                            _snrConnectionId = conRest.ConnectionId;
                            _connected = true;

                            // Create Sale
                            if (_paymentRequestResponse is null)
                            {
                                if (string.IsNullOrWhiteSpace(_docNo))
                                    new Exception("Invalid Booking Number; (EXIT35.0106.B50)");

                                string paymentRequestResult = await CreatePaymentTransaction(_deviceId, _machineCode, _docNo, _paymentAmount, _current, _paymentGateway, _firstName, _lastName, _contactNo, _financePaymentMethod, _snrConnectionId);
                                CreateSaleResponse resp = JsonConvert.DeserializeObject<CreateSaleResponse>(paymentRequestResult);

                                if (ValidateNewSaleResponseData(resp, out Exception err) == false)
                                {
                                    throw err;
                                }
                                else
                                {
                                    _paymentRequestResponse = resp;
                                    RaiseOnPaymentRequestResult(_paymentRequestResponse);
                                }
                            }
                        }
                        else
                        {
                            if (conRest.Error != null)
                            {
                                throw conRest.Error;
                            }
                            else
                                throw new Exception("Unknown error when talking to web server");
                        }
                    }

                    if ((_disposed == false))
                        Task.Delay(300).Wait();
                }
            }
            catch (Exception ex)
            {
                Exception err2 = new Exception($@"{_paymentGateway} payment error. {ex.Message}; (EXIT35.0106.EX01)", ex);

                _connectionException = err2;
                _log?.LogError(LogChannel, _docNo, err2, "EX01", "BTnGPaymentGatewaySnRClient.SaleThreadWorking");

                RaiseOnPaymentCompleted(PaymentResult.Fail, null, err2);
            }
            finally
            {
                _isStopWorking = true;
                _snrConnectionId = null;
                _connected = false;
                await EndConnection();

                _realTimeConnection = null;
                _saleThreadWorker = null;
            }

            return;

            //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

            /// <summary>
            /// FuncCode:EXIT35.018A
            /// </summary>
            async Task<ConnectResult> Connect()
            {
                string connectionIdX = null;
                Exception errX = null;

                bool successConn = false;
                string snrUrl = $@"{_webApiBaseUrl}paymentgatewayhub";

                //_connection = new HubConnectionBuilder()
                //    .WithUrl(snrUrl)
                //    .Build();

                // My Custom Connetion to KTMBWebApi ----------------------
                _realTimeConnection = new HubConnectionBuilder()
                    .WithUrl(snrUrl,
                        new Action<Microsoft.AspNetCore.Http.Connections.Client.HttpConnectionOptions>((httpOptions) =>
                        {
                            httpOptions.Headers.Add("RequestSignature", SecurityHelper.getSignature());
                        //httpOptions.Headers.Add("RequestSignature", "");
                    }))
                    .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5) })
                    .Build();

                /////----------------------------------------------------------

                _realTimeConnection.On<string>("collectReceipt", (jsObjStr) => OnCollectReceipt(jsObjStr));
                _realTimeConnection.On<string>("receiveMessage", (msg) => OnReceiveMessage(msg));

                _log?.LogText(LogChannel, _docNo, $@"Start SignalR connection...", "A10", "BTnGPaymentGatewaySnRClient.Connect");
                try
                {
                    await _realTimeConnection.StartAsync();

                    connectionIdX = _realTimeConnection.ConnectionId;

                    _log?.LogText(LogChannel, _docNo, $@"SignalR Client network connection done; Connection Id : {connectionIdX}", "A15", "BTnGPaymentGatewaySnRClient.Connect");

                    successConn = true;
                }
                catch (Exception ex)
                {
                    errX = new Exception($@"Error when connect to web server; {ex.Message}; (EXIT35.018A.EX01)", ex);
                    connectionIdX = null;
                    successConn = false;
                    _log?.LogError(LogChannel, _docNo, errX, "EX01", "BTnGPaymentGatewaySnRClient.Connect");
                }

                return new ConnectResult(successConn, connectionIdX, errX);
            }

            /// <summary>
            /// FuncCode:EXIT35.018C
            /// </summary>
            async Task<string> CreatePaymentTransaction(string deviceIdX, string machineCodeX, 
                string docNoX, decimal paymentAmountX, string currentX, string paymentServiceX, 
                string firstNameX, string lastNameX, string contactNoX, string financePaymentMethod,
                string snrConnectionId)
            {
                PaymentCustomInfo custInfo = new PaymentCustomInfo() { 
                    Amount = paymentAmountX, 
                    CreationLocalTime = DateTime.Now, 
                    DeviceID = deviceIdX, 
                    DocumentNo = docNoX, 
                    MachineCode = machineCodeX, 
                    MachineNetworkID = snrConnectionId
                };

                NewPayment newPay = new NewPayment() 
                {
                    MerchantId = RegistrySetup.GetRegistrySetting().BTnGMerchantId,
                    PaymentGateway = paymentServiceX,
                    MerchantTransactionNo = docNoX,
                    Currency = currentX,
                    Amount = paymentAmountX,

                    NotificationUrl = $@"{_webApiUrl}PaymentGateway/dispatchPaidReceipt",
                    //NotificationUrl = @"https://ktmb-dev-api.azurewebsites.net/api/paymentgateway/dispatchPaidReceipt",
                    CustomField = JsonConvert.SerializeObject(custInfo),

                    OrderTitle = "KTMB Sale Payment",
                    DisplayName = "KTMB Sale Payment",
                    TerminalType = "Kiosk",
                    ExpirySecond = _bTnGMinimumWaitingPeriod,
                    PayerInfo = new PassengerSummaryInfo()
                    {
                        FirstName = firstNameX,
                        LastName = lastNameX,
                        ContactNo = contactNoX
                    }
                };

                newPay.Signature = newPay.GetSignatureString();

                CreatePaymentRequest paymentRequest = new CreatePaymentRequest()
                {
                    PaymentMethod = financePaymentMethod,
                    BTnGPayment = newPay
                };

                string reqStr = JsonConvert.SerializeObject(paymentRequest);

                _log?.LogText(LogChannel, _docNo, reqStr, "B1", "BTnGPaymentSnRClient.CreatePaymentTransaction");

                string resultStr = await _realTimeConnection.InvokeAsync<string>("CreateSalePayment", reqStr);
                return resultStr;
            }

            /// <summary>
            /// Return true when CreateSaleResponse instance is valid. FuncCode:EXIT35.018D
            /// </summary>
            /// </summary>
            bool ValidateNewSaleResponseData(CreateSaleResponse respX, out Exception errorX)
            {
                errorX = null;

                if (respX is null)
                {
                    errorX = new Exception($@"Problem occur when requesting payment procedure; Unable to connect to Payment Gateway server; (EXIT35.018D.X01)");
                }

                else if (respX.Status == false)
                {
                    if (respX.Message?.Trim().Length > 0)
                    {
                        errorX = new Exception($@"Problem occur when requesting payment procedure. {respX.Message.Trim()}; Code: {respX.Code}; (EXIT35.018D.X03)");
                    }
                    else
                    {
                        errorX = new Exception($@"Problem occur when requesting payment procedure; Payment Gateway server error; Code: {respX.Code}; (EXIT35.018D.X05)");
                    }
                }

                // if respX.Code == "0"
                else
                {
                    if (respX.Data is null)
                    {
                        errorX = new Exception($@"Problem occur when requesting payment procedure; Error data reading; (EXIT35.018D.X07)");
                    }
                    else if (string.IsNullOrWhiteSpace(respX.Data.Base64ImageQrCode))
                    {
                        errorX = new Exception($@"Invalid 2D barcode; (EXIT35.018D.X10)");
                    }
                }

                return (errorX is null);
            }

            /// <summary>
            /// FuncCode:EXIT35.018E
            /// </summary>
            void RaiseOnPaymentRequestResult(CreateSaleResponse paymentRequestResponse)
            {
                try
                {
                    this.OnPaymentRequestResult?.Invoke(null, new PaymentRequestResultEventArgs(paymentRequestResponse));
                }
                catch (Exception ex2)
                {
                    _log?.LogError(LogChannel, _docNo, new Exception($@"Unhandled event exception. {ex2.Message}", ex2), "EX01", "BTnGPaymentGatewaySnRClient.RaiseOnPaymentRequestResult");
                }
            }            
        }

        /// <summary>
        /// FuncCode:EXIT35.0111
        /// </summary>
        private async Task EndConnection()
        {
            if (_realTimeConnection != null)
            {
                try
                {
                    try
                    {
                        await _realTimeConnection.StopAsync();
                    }
                    catch { }

                    try
                    {
                        await _realTimeConnection.DisposeAsync();
                    }
                    catch { }
                }
                catch { }
            }
        }

        /// <summary>
        /// FuncCode:EXIT35.0107
        /// </summary>
        /// <param name="resultX"></param>
        /// <param name="errorX">null if resultX = PaymentResult.Success </param>
        private void RaiseOnPaymentCompleted(PaymentResult resultX, PaymentReceipt receipt, Exception errorX)
        {
            if (_isCompleted)
                return;

            if (this.OnPaymentCompleted is null)
                return;

            Thread raiseEventTWorker = new Thread(new ThreadStart(new Action(() => 
            {
                lock(_completedEventLock)
                {
                    if (_isCompleted == false)
                    {
                        try
                        {
                            if (receipt != null)
                            {
                                this.OnPaymentCompleted?.Invoke(null, new PaymentCompletedResultEventArgs(receipt));
                                _isCompleted = true;

                                _log?.LogText(LogChannel, _docNo, $@"Payment Completed with Status (A) : {resultX.ToString()}",
                                    "B01", "BTnGPaymentSnRClient.RaiseOnPaymentCompleted", adminMsg: $@"Payment Completed with Status (A) : {resultX.ToString()}");
                            }
                            else if (resultX == PaymentResult.Fail)
                            {
                                this.OnPaymentCompleted?.Invoke(null, new PaymentCompletedResultEventArgs(errorX));
                                _isCompleted = true;

                                _log?.LogText(LogChannel, _docNo, $@"Payment Completed with Status : Fail State",
                                    "B02", "BTnGPaymentSnRClient.RaiseOnPaymentCompleted", adminMsg: $@"Payment Completed with Status : Fail State");
                            }
                            else if (resultX == PaymentResult.Cancel)
                            {
                                this.OnPaymentCompleted?.Invoke(null, new PaymentCompletedResultEventArgs(PaymentResult.Cancel));
                                _isCompleted = true;

                                _log?.LogText(LogChannel, _docNo, $@"Payment Completed with Status : Canceled State",
                                    "B03", "BTnGPaymentSnRClient.RaiseOnPaymentCompleted", adminMsg: $@"Payment Completed with Status : Canceled State");
                            }
                            else if (resultX == PaymentResult.Timeout)
                            {
                                this.OnPaymentCompleted?.Invoke(null, new PaymentCompletedResultEventArgs(PaymentResult.Timeout));
                                _isCompleted = true;

                                _log?.LogText(LogChannel, _docNo, $@"Payment Completed with Status : Timeout State",
                                    "B04", "BTnGPaymentSnRClient.RaiseOnPaymentCompleted", adminMsg: $@"Payment Completed with Status : Timeout State");
                            }
                            else
                                _log?.LogError(LogChannel, _docNo, new Exception($@"PaymentResult: {Enum.GetName(typeof(PaymentResult), resultX)}; {errorX?.Message}; (EXIT35.0107.X01)", errorX),
                                    "X10", "BTnGPaymentGatewaySnRClient.RaiseOnPaymentRequestResult", adminMsg: $@"Error found when ending transaction; {errorX?.Message}; (EXIT35.0107.X01)") ;
                        }
                        catch (Exception ex2)
                        {
                            _log?.LogError(LogChannel, _docNo, new Exception($@"Unhandled event exception. {ex2.Message}; (EXIT35.0107.EX01)", ex2), "EX01", "BTnGPaymentGatewaySnRClient.RaiseOnPaymentRequestResult", 
                                adminMsg: $@"Error at the ending of transaction; {ex2.Message}; (EXIT35.0107.EX01)") ;
                        }
                    }
                }
            })));
            raiseEventTWorker.IsBackground = true;
            raiseEventTWorker.Priority = ThreadPriority.Highest;
            raiseEventTWorker.Start();
        }

        //EventHandler<PaymentEchoMessageEventArgs> OnPaymentEchoMessageReceived;

        /// <summary>
        /// FuncCode:EXIT35.0108
        /// </summary>
        private void RaiseOnPaymentEchoMessageReceived(string echoMessage)
        {
            if (_isCompleted)
                return;

            if (this.OnPaymentEchoMessageReceived is null)
                return;

            Thread raiseEventTWorker = new Thread(new ThreadStart(new Action(() =>
            {
                lock (_completedEventLock)
                {
                    if (_isCompleted == false)
                    {
                        try
                        {
                            this.OnPaymentEchoMessageReceived?.Invoke(null, new PaymentEchoMessageEventArgs(echoMessage?.Trim()));
                        }
                        catch (Exception ex2)
                        {
                            _log?.LogError(LogChannel, _docNo, new Exception($@"Unhandled event exception. {ex2.Message}", ex2), "EX01", "BTnGPaymentGatewaySnRClient.RaiseOnPaymentEchoMessageReceived");
                        }
                    }
                }
            })));
            raiseEventTWorker.IsBackground = true;
            raiseEventTWorker.Priority = ThreadPriority.Highest;
            raiseEventTWorker.Start();
        }

        public async Task<string> CreatePaymentTransaction(NewPayment newPaymentReq)
        {
            string reqStr = JsonConvert.SerializeObject(newPaymentReq);

            string resultStr = await _realTimeConnection.InvokeAsync<string>("CreateSalePayment", reqStr);

            return resultStr;
        }

        public async Task<string> CheckPaymentResult(string bookingNo)
        {
            if (_isStopWorking)
                throw new Exception($@"{_paymentGateway} payment has already ended");

            string resultStr = await _realTimeConnection.InvokeAsync<string>("CheckPaymentResult", bookingNo);

            return resultStr;
        }

        public void CancelRefundSale()
        { }

        public async Task<string> GetServerTime()
        {
            if (_realTimeConnection is null)
                throw new Exception("When reading server time, there is no web connection found for Boost & TnG Payment.");

            string resultStr = await _realTimeConnection.InvokeAsync<string>("GetServerTime", _machineCode);

            return resultStr;
        }

        public async Task SendEcho(string message)
        {
            if (_realTimeConnection is null)
                throw new Exception("When send echo message to server, there is no web connection found refer to Boost & TnG Payment group.");

            await _realTimeConnection.InvokeAsync("EchoSend", message);
        }

        /// <summary>
        /// FuncCode:EXIT35.0110
        /// </summary>
        private void OnCollectReceipt(string jsonObjString)
        {
            _log?.LogText(LogChannel, _docNo, jsonObjString, "A01", "BTnGPaymentGatewaySnRClient.OnCollectReceipt");

            try
            {
                PaymentReceipt receipt = JsonConvert.DeserializeObject<PaymentReceipt>(jsonObjString);

                _log?.LogText(LogChannel, _docNo, jsonObjString, "A01", "BTnGPaymentSnRClient.OnCollectReceipt");
                _log?.LogText(LogChannel, _docNo, receipt, "A02", "BTnGPaymentSnRClient.OnCollectReceipt", extraMsg: "MsgObj: PaymentReceipt");

                if (receipt is null)
                {
                    _log?.LogError(LogChannel, _docNo,
                        new Exception($@"Invalid Empty Receipt; (EXIT35.0110.X20)"),
                        "X20", "BTnGPaymentSnRClient.OnCollectReceipt");

                    return;
                }

                else if (_docNo.Equals(receipt.MerchantTransactionNo) == false)
                {
                    _log?.LogError(LogChannel, _docNo,
                        new Exception($@"Invalid Booking Number in BTnG Receipt; Current Booking No.: {_docNo}; Receipt Booking No.: {receipt.MerchantTransactionNo}; (EXIT35.0110.X21)"),
                        "X21", "BTnGPaymentSnRClient.OnCollectReceipt");

                    return;
                }
                else if (_paymentRequestResponse.Data.SalesTransactionNo.Equals(receipt.SalesTransactionNo) == false)
                {
                    _log?.LogError(LogChannel, _docNo,
                        new Exception($@"Invalid Payment Gateway Sale Number in Receipt; Current Payment Gateway Sale No.: {_paymentRequestResponse.Data.SalesTransactionNo}; Receipt Payment Gateway Sale No.: {receipt.SalesTransactionNo}; (EXIT35.0110.X22)"),
                        "X22", "BTnGPaymentSnRClient.OnCollectReceipt");

                    return;
                }

                try
                {
                    RaiseOnPaymentCompleted(PaymentStatus.ToPaymentResult(receipt.Status), receipt, null);
                }
                catch (Exception ex2)
                {
                    _log?.LogError(LogChannel, _docNo, new Exception($@"Error; {ex2.Message}", ex2), "EX11", "BTnGPaymentGatewaySnRClient.OnCollectReceipt");
                }
            }
            catch (Exception ex)
            {
                _log?.LogError(LogChannel, _docNo, new Exception($@"Error; {ex.Message}; (EXIT35.0110.EX01)", ex), "EX01", "BTnGPaymentGatewaySnRClient.OnCollectReceipt");
                /////RaiseOnPaymentCompleted(PaymentResult.Fail, null, new Exception($@"{ex.Message}; (EXIT35.0110.EX01)", ex));
            }
        }

        private void OnReceiveMessage(string message)
        {
            _log?.LogText(LogChannel, _docNo, $@"message: {message}", "A01", "BTnGPaymentGatewaySnRClient.OnDispatchMessage");
            RaiseOnPaymentEchoMessageReceived(message);
        }

        class ConnectResult
        {
            public bool IsConnected { get; private set; }
            public string ConnectionId { get; private set; }
            public Exception Error { get; private set; }

            public ConnectResult(bool isConnected, string connectionId, Exception err)
            {
                IsConnected = isConnected;
                ConnectionId = connectionId;
                Error = err;
            }
        }
    }
}